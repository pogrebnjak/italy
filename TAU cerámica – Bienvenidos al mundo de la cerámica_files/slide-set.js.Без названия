{
    // From https://davidwalsh.name/javascript-debounce-function.
	function debounce(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
    };
    
    class Slideshow {
        constructor(el) {
            this.DOM = {};
            this.DOM.el = el;
            this.settings = {
                animation: {
                    slides: {
                        duration: 800,
                        easing: 'easeOutQuint'
                    },
                    shape: {
                        duration: 500,
                        easing: {in: 'easeOutQuint', out: 'easeOutQuad'}
                    }
                },
                frameFill: '#000',
                autoplay: {
                    enabled: true, // Habilitar o deshabilitar autoplay
                    interval: 6000 // Intervalo en milisegundos
                }
            }
            this.init();
        }
        init() {
            this.DOM.slides = Array.from(this.DOM.el.querySelectorAll('.slides > .slide'));
            this.slidesTotal = this.DOM.slides.length;
            this.DOM.nav = this.DOM.el.querySelector('.slidenav');
            this.DOM.nextCtrl = this.DOM.nav.querySelector('.slidenav__item--next');
            this.DOM.prevCtrl = this.DOM.nav.querySelector('.slidenav__item--prev');
            this.DOM.goToCtrl = this.DOM.nav.querySelectorAll(".slidenav__item--goTo");
            this.DOM.progress = this.DOM.nav.querySelector(".slidenav__item--progress");
            this.current = 0;
            this.createFrame(); 
            this.initEvents();
            if (this.settings.autoplay.enabled) {
                this.startAutoplay();
            }

        }
        startAutoplay() {
            this.stopAutoplay();
            this.autoplayInterval = setInterval(() => {
                this.nextSlide('next');
            }, this.settings.autoplay.interval);

            // Opcional: Detener autoplay en hover
           
        }
        stopAutoplay() {
            clearInterval(this.autoplayInterval);
        }
        nextSlide() {
            // Lógica para avanzar al siguiente slide
            this.navigate('next');
            //console.log('Next slide');
            // Aquí iría tu lógica específica para cambiar de slide
        }

        createFrame() {
            this.rect = this.DOM.el.getBoundingClientRect();
            this.frameSize = this.rect.width/18;
            this.paths = {
                initial: this.calculatePath('initial'),
                final: this.calculatePath('final')
            };
            this.DOM.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            this.DOM.svg.setAttribute('class', 'shape');
            this.DOM.svg.setAttribute('width','100%');
            this.DOM.svg.setAttribute('height','100%');
            this.DOM.svg.setAttribute('viewbox',`0 0 ${this.rect.width} ${this.rect.height}`);
            this.DOM.svg.innerHTML = `<path fill="${this.settings.frameFill}" d="${this.paths.initial}"/>`;
            this.DOM.el.insertBefore(this.DOM.svg, this.DOM.nav);
            this.DOM.shape = this.DOM.svg.querySelector('path');
        }
        updateFrame() {
            this.paths.initial = this.calculatePath('initial');
            this.paths.final = this.calculatePath('final');
            this.DOM.svg.setAttribute('viewbox',`0 0 ${this.rect.width} ${this.rect.height}`);
            this.DOM.shape.setAttribute('d', this.isAnimating ? this.paths.final : this.paths.initial);
        }
        calculatePath(path = 'initial') {
            return path === 'initial' ?
                    `M 0,0 0,${this.rect.height} ${this.rect.width},${this.rect.height} ${this.rect.width},0 0,0 Z M 0,0 ${this.rect.width},0 ${this.rect.width},${this.rect.height} 0,${this.rect.height} Z` :
                    `M 0,0 0,${this.rect.height} ${this.rect.width},${this.rect.height} ${this.rect.width},0 0,0 Z M ${this.frameSize},${this.frameSize} ${this.rect.width-this.frameSize},${this.frameSize} ${this.rect.width-this.frameSize},${this.rect.height-this.frameSize} ${this.frameSize},${this.rect.height-this.frameSize} Z`;
        }
        initEvents() {

            // this.DOM.el.addEventListener('mouseover', () => this.stopAutoplay());
            // this.DOM.el.addEventListener('mouseout', () => this.startAutoplay());

            this.DOM.nextCtrl.addEventListener('click', () => this.navigate('next'));
            this.DOM.prevCtrl.addEventListener('click', () => this.navigate('prev'));
            
            this.DOM.goToCtrl.forEach((element,idx) => {
                if(idx == 0) {
                    element.classList.add('slidenav__item--goTo-active'); 
                }

                element.addEventListener('click', (el) =>  {
                    const slideNumber = Number(el.srcElement.dataset.targetSlide)
                    if(this.current == slideNumber) return;
                    this.navigate(Number(slideNumber));
                });
            });
            
            this.DOM.progress.style.width = 100 / this.slidesTotal + '%';
            console.log('ancho', this.DOM.progress.style.width);
            window.addEventListener('resize', debounce(() => {
                this.rect = this.DOM.el.getBoundingClientRect();
                this.updateFrame();
            }, 20));
            
            document.addEventListener('keydown', (ev) => {
                const keyCode = ev.keyCode || ev.which;
                if ( keyCode === 37 ) {
                    this.navigate('prev');
                }
                else if ( keyCode === 39 ) {
                    this.navigate('next');
                }
            });
        }
        navigate(dir = 'next') {
            if ( this.isAnimating ) return false;
            this.isAnimating = true;

            const animateShapeIn = anime({
                targets: this.DOM.shape,
                duration: this.settings.animation.shape.duration,
                easing: this.settings.animation.shape.easing.in,
                d: this.paths.final
            });

            const animateSlides = () => {
                return new Promise((resolve, reject) => {
                    const currentSlide = this.DOM.slides[this.current];
                    let direction = dir == 'next' || this.current < dir ? 'next' : false;
                    anime({
                        targets: currentSlide,
                        duration: this.settings.animation.slides.duration,
                        easing: this.settings.animation.slides.easing,
                        translateX: direction === 'next' ? -1*this.rect.width : this.rect.width,
                        complete: () => {
                            currentSlide.classList.remove('slide--current');
                            resolve();
                        }
                    });
                    
                    if(typeof dir == 'number') {
                        this.current = dir;
                    } else if (direction === "next") {
                        if (this.current < this.slidesTotal - 1) {
                            this.current = this.current + 1;
                        } else {
                            this.current = 0;
                        }
                    } else {
                        if (this.current > 0) {
                            this.current = this.current - 1;
                        } else {
                            this.current = this.slidesTotal - 1;
                        }
                    }
                    
                    const newSlide = this.DOM.slides[this.current];
                    newSlide.classList.add('slide--current');
                    this.DOM.progress.style.width = ((this.current + 1) / this.slidesTotal) * 100 + '%';
                    this.DOM.goToCtrl.forEach((element,idx) => {
                        if(idx <= this.current) {
                            element.classList.add('slidenav__item--goTo-active'); 
                        } else {
                            element.classList.remove('slidenav__item--goTo-active'); 
                        }
                        // newSlide.classList.add('slide--current');
                    })
                    anime({
                        targets: newSlide,
                        duration: this.settings.animation.slides.duration,
                        easing: this.settings.animation.slides.easing,
                        translateX: [direction === 'next' ? this.rect.width : -1*this.rect.width,0]
                    });
        
                    const newSlideImg = newSlide.querySelector('.slide__img');
                    anime.remove(newSlideImg);
                    anime({
                        targets: newSlideImg,
                        duration: this.settings.animation.slides.duration*4,
                        easing: this.settings.animation.slides.easing,
                        translateX: [direction === 'next' ? 200 : -200, 0]
                    });
        
                    anime({
                        targets: [newSlide.querySelector('.slide__title'), newSlide.querySelector('.slide__desc'), newSlide.querySelector('.slide__link')],
                        duration: this.settings.animation.slides.duration*2,
                        easing: this.settings.animation.slides.easing,
                        delay: (t,i) => i*100+100,
                        translateX: [direction === 'next' ? 300 : -300,0],
                        opacity: [0,1]
                    });
                });
            };

            const animateShapeOut = () => {
                anime({
                    targets: this.DOM.shape,
                    duration: this.settings.animation.shape.duration,
                    delay: 150,
                    easing: this.settings.animation.shape.easing.out,
                    d: this.paths.initial,
                    complete: () => this.isAnimating = false
                });
            }

            animateShapeIn.finished.then(animateSlides).then(animateShapeOut);
        }
    };

    new Slideshow(document.querySelector('.slideshow'));
    imagesLoaded('.slide__img', { background: true }, () => document.body.classList.remove('loading'));


    // // Selecciona el elemento del slideshow
    // const slideshowElement = document.querySelector('.slideshow');

    // if (slideshowElement) {
    //     // Inicializa el Slideshow si el elemento existe
    //     new Slideshow(slideshowElement);

    //     // Selecciona las imágenes dentro del slideshow
    //     const images = document.querySelectorAll('.slide__img');

    //     if (images.length > 0) {
    //         // Usa imagesLoaded para manejar la carga de imágenes
    //         imagesLoaded(images, { background: true }, () => {
    //             document.body.classList.remove('loading');
    //         });
    //     } else {
    //         console.warn('No se encontraron imágenes con la clase .slide__img');
    //     }
    // } else {
    //     console.warn('No se encontró un elemento con la clase .slideshow');
    // }
};